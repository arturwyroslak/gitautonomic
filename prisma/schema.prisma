generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InstallationConfig {
  id              String   @id
  installationId  BigInt   @unique
  provider        String
  model           String
  endpoint        String?
  apiKeyHash      String?
  maxTasksPerIter Int      @default(4)
  maxTotalIter    Int      @default(50)
  adaptiveness    Json     @default("{\"enabled\":true}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model IssueAgent {
  id               String   @id
  installationId   BigInt
  owner            String
  repo             String
  issueNumber      Int
  issueTitle       String
  issueBodyHash    String
  branchName       String
  prNumber         Int?
  planCommitSha    String?
  planVersion      Int      @default(1)
  planHash         String?
  expansions       Int      @default(0)
  totalTasks       Int      @default(0)
  doneTasks        Int      @default(0)
  iterations       Int      @default(0)
  confidence       Float    @default(0)
  phase            String   @default("executing")
  blocked          Boolean  @default(false)
  completed        Boolean  @default(false)
  lastIterAt       DateTime?
  lastEvalAt       DateTime?
  coverageLines    Float?
  coverageStmts    Float?
  coverageBranches Float?
  coverageFuncs    Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tasks            Task[]
  iterationsLog    Iteration[]
  embeddings       IssueEmbedding[]
  memories         AgentMemory[]
  reasoningTraces  ReasoningTrace[]
  patchLogs        PatchLog[]

  @@index([installationId, owner, repo, issueNumber])
}

model Task {
  id                   String   @id
  issueAgentId         String
  externalId           String
  parentExternalId     String?
  title                String
  type                 String
  paths                String[]
  riskScore            Float    @default(0)
  origin               String   @default("initial")
  status               String   @default("pending")
  acceptance           String?
  orderIndex           Int
  generatedAtIteration Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  issueAgent           IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, status])
  @@index([issueAgentId, parentExternalId])
}

model Iteration {
  id             String   @id
  issueAgentId   String
  number         Int
  executedTasks  String[]
  commitSha      String?
  success        Boolean
  deltaConfidence Float   @default(0)
  errorMessage   String?
  createdAt      DateTime @default(now())
  issueAgent     IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, number])
}

model IssueEmbedding {
  id           String   @id
  issueAgentId String
  scope        String
  referenceId  String?
  vector       Json
  model        String
  createdAt    DateTime @default(now())
  issueAgent   IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, scope])
}

model FileEmbedding {
  id            String   @id
  installationId BigInt
  owner         String
  repo          String
  path          String
  blobSha       String
  vector        Json
  model         String
  updatedAt     DateTime @default(now())

  @@unique([installationId, owner, repo, path])
  @@index([installationId, owner, repo])
}

model AgentMemory {
  id           String   @id
  issueAgentId String
  type         String
  vectorRef    String?
  content      Json
  salience     Float    @default(0.5)
  decayFactor  Float    @default(0.98)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  issueAgent   IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, type])
  @@index([issueAgentId, salience])
}

model ReasoningTrace {
  id           String   @id
  issueAgentId String
  iteration    Int
  phase        String
  tokens       Int?
  score        Float?
  content      Json
  createdAt    DateTime @default(now())
  issueAgent   IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, iteration])
}

model PatchLog {
  id           String   @id
  issueAgentId String
  iteration    Int
  tasks        String[]
  diffHash     String
  diffPreview  String
  fileStats    Json      // {added,deleted,modified,renamed,deletedFiles,createdFiles, largeFileTouches:[...]}
  applied      Boolean
  commitSha    String?
  validation   Json?     // wyniki walidatora
  createdAt    DateTime  @default(now())
  issueAgent   IssueAgent @relation(fields: [issueAgentId], references: [id], onDelete: Cascade)

  @@index([issueAgentId, iteration])
  @@index([issueAgentId, diffHash])
}

model AgentCheckRuns {
  id                   String @id @default(cuid())
  agentId              String @unique
  planCheckId          Int
  execCheckId          Int
  evalCheckId          Int
  securityCheckId      Int
  performanceCheckId   Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([agentId])
}

model ActivityLog {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  agentId    String?
  event      String
  details    String?
  success    Boolean

  @@index([timestamp])
  @@index([agentId])
}

model StakeholderReview {
  id                String   @id
  agentId           String
  planVersion       Int
  status            String
  requiredApprovers String   // JSON array
  approvedBy        String   // JSON array
  createdAt         DateTime
  updatedAt         DateTime @updatedAt

  @@index([agentId])
}

model PlanVersion {
  id          String   @id
  agentId     String
  version     Int
  planData    String   // JSON
  conflicts   String   // JSON
  createdAt   DateTime
  updatedAt   DateTime @updatedAt

  @@index([agentId, version])
}

model PlanUpdateLog {
  id        String   @id
  agentId   String
  version   Int
  changes   String   // JSON
  reason    String?
  createdAt DateTime
  updatedAt DateTime @updatedAt

  @@index([agentId, version])
}

model EmbeddingDocument {
  id        String   @id
  content   String
  metadata  String   // JSON
  embedding String   // JSON
  type      String
  timestamp DateTime

  @@index([type])
}

model KnowledgeNode {
  id         String @id
  type       String
  name       String
  properties String // JSON

  @@index([type])
}

model KnowledgeRelationship {
  id       String @id
  sourceId String
  targetId String
  type     String
  weight   Float
  metadata String? // JSON

  @@index([sourceId])
  @@index([targetId])
}

model FeedbackEvent {
  id         String   @id
  agentId    String
  action     String
  outcome    String
  userRating Int?
  metadata   String?  // JSON
  createdAt  DateTime @default(now())

  @@index([agentId])
}

model EnhancedAnalysis {
  id             String   @id
  owner          String
  repo           String
  analysisReport String   // JSON
  actionPlan     String   // JSON
  createdAt      DateTime

  @@index([owner, repo])
}
