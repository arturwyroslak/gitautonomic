version: "3.8"

services:
  api:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    ports:
      - "3000"
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Public host (np. domena w Dokploy/ingress)
      APP_HOST: ${APP_HOST}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://${APP_HOST}/api/auth/github/callback}

      # DB / Redis (wewn. sieć)
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379

      # GitHub App
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}

      # Dashboard OAuth (opcjonalnie)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}

      # AI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}

      # Inne
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:${PORT:-3000}/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379

      # GitHub App / OAuth (jeśli worker wymaga)
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}

      # AI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}

      # Inne
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work

  db-migrate:
    build: .
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: >
      sh -c "
        echo 'Running Prisma migrations...' &&
        for i in $(seq 1 30); do
          npx prisma migrate deploy && npx prisma generate && exit 0;
          echo 'DB not ready yet, retrying in 2s...';
          sleep 2;
        done;
        echo 'Migration failed after retries' >&2; exit 1
      "

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gitautonomic}
      POSTGRES_USER: ${POSTGRES_USER:-gitautonomic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gitautonomic} -d ${POSTGRES_DB:-gitautonomic}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  agent_work:
