services:
  api:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    ports:
      - "3300:3300"
    environment:
      # Ten sam klucz zostanie użyty w worker dzięki anchor *gh_app_key
      GITHUB_APP_PRIVATE_KEY: &gh_app_key |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEA54OmGlk2gXyVTOGmGfIy0B3Hk8IlhwwASW9z+0V3qry2ulb6
        EIZYQi3q4rKqOADgxZ2OgIVf8//zf8h0Lu3SR7BiPtnxRq/KtpqlW7u93TKHI23F
        MA5Bz3HawE3zsyHapsrY+3/G9BaEuOHbM/TvVKlt1i3fFl/3Qi6H7W16m89fnI1s
        v/DkfMdYLUkCoNJD8id4mcMJ3adUJWAwE8v9cHRucKsk2TV5YzU1uvmUjOCiYHd4
        /Y+p74OeG2/PqSoaH36JsXlJUFHU73eE2Zl03bDHnfKWGnLn4j2axwodAfXM5tDP
        1aD9QEzqEd2kIwQrHsgrqE1gfs+xTOw+I7VVhQIDAQABAoIBAAlWKtW3MVaJgq/m
        Db/QH7J68PiJhN/sYPqVLxU8GPZew/PB3DXcZSTOG0HnOKwnhOkTUJLoThVWBijq
        GZ1m4+sWNvAX8/4IyuEQXYjUinSoPAD2xVQJzyehjNPikOhxfhLp7VQ/M/PWEKYw
        HZn7z8cXSiGwGeYaGqulmr+9gYtU/v/1VgT7kt+VyB+04t3o8tU7BjJpn2snK1CC
        D+NWqNH1WMDTdv4MgqJ1gnUSta3cQBX7rDHfN361kuRoREVyUDo1KF0x90B/zaTz
        m2obJEVpTfPcIMXN1HZXdnvqwIgLkM8BTAC7/1JDOoD5k/aYeaKnaAQtAEvhd4H2
        mUKiGMECgYEA9il5ZzmvCfm6rfgYMqYM4htWb6LUtuDGTscZIeMfyBrqMtBHRMmm
        4MFdmAngqNj85z5M5j0lGEIxS94Lb1SiGaxwi6ImBih7j+1U4CEwIeD7kIquGPhP
        962g7RPnKrtZgytJjEkm9fjo96YtwWmioL/U66mVXfR1iyjwe/jdyFECgYEA8MRP
        l6edyYvM3NFsnbqq9uOE3KhMZCdX61gjkQI5UURIZXQB3vIQINHe43icrH64cKA0
        PfJbIgFKzgc7b5Cf3F3/stzUVTkrZTCBuWEWR2hDXqzIQOSrSnZKRJH81k2TMocd
        +gd9BpNfOTSQ5YQpoVBqzoQXwiPlyG+GDWeioPUCgYEAvQZKEGcuL1XR8QdC5Zm2
        6OWfMShzeV8PSK0AcpIq9IkecBiZsYu7lnlFuptTJbVCNvwTJvWrB37ExgJi+4Gc
        3GQbJE5GLpJll7biZx11DX7rDio/2DLNjV6J5aNT7u9gpCXYW15NCbKyioDUP+Iz
        HIdSJAjcBwLSRCMSz8/h1pECgYBySl4V+YVXVTusXuWWgjQB+sLpFCMfL+X2W+KW
        RV38C9PqBQWWVYX+bmHFzU1iPM1E+WeTOGa2X7Ko1poKPbcFHsHwoA9TXU4SPNJ3
        s3Sl9QJ2AMMWuvXs5PYgUsSY3j5PsAA03jUlV/PN7fwSV4iDgO8SlXXJvMypNveF
        iXqTuQKBgC0U0M4buIb5MHc1S/UBzIeVXqG1Z809SY6VCTwBi7oEqupnyFMB3qS8
        s5fuMRxTxZsoxRYEfy5jRQ7U0tNKcJ90K7K/GsZ2GtCIpdYkApYMJUgVSB2yiSAI
        +6a7P+SswpjCdb4EaKKh+KQNaIVLpUR2AlkZ8IgksFoyqXE5XYYT
        -----END RSA PRIVATE KEY-----
      NODE_ENV: production
      PORT: ${PORT:-3300}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      APP_HOST: ${APP_HOST}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://${APP_HOST}/api/auth/github/callback}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work
    healthcheck:
      # Bez wget/curl – używamy Node fetch
      test: ["CMD", "node", "-e", "fetch('http://localhost:'+(process.env.PORT||3300)+'/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      # Reuse tego samego PEM
      GITHUB_APP_PRIVATE_KEY: *gh_app_key
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work

  db-migrate:
    build: .
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: >
      sh -c "
        echo 'Running Prisma migrations...' &&
        for i in $(seq 1 30); do
          npx prisma migrate deploy && npx prisma generate && exit 0;
          echo 'DB not ready yet, retrying in 2s...';
          sleep 2;
        done;
        echo 'Migration failed after retries' >&2; exit 1
      "

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gitautonomic}
      POSTGRES_USER: ${POSTGRES_USER:-gitautonomic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/create-user-db.sql:/docker-entrypoint-initdb.d/10-create-user-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gitautonomic} -d ${POSTGRES_DB:-gitautonomic}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  agent_work:
