version: "3.9"

volumes:
  postgres_data:
  redis_data:

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gitautonomic
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gitautonomic"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db-setup:
    build: .
    image: gitautonomic-app
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        until pg_isready -h db -p 5432 -U postgres; do
          echo 'Database not ready, waiting...'
          sleep 2
        done &&
        echo 'Database ready! Running migrations...' &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        echo 'Database setup complete!'
      "
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/gitautonomic
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  api:
    build: .
    image: gitautonomic-app
    environment:
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: /app/private-key.pem
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://localhost:3000/api/auth/github/callback}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-for-jwt-tokens}
      DATABASE_URL: postgresql://postgres:postgres@db:5432/gitautonomic
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: ${AGENT_WORK_ROOT:-/tmp/ai-agent-work}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      PORT: ${PORT:-3000}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    volumes:
      - /tmp/ai-agent-work:/tmp/ai-agent-work
      - ./private-key.pem:/app/private-key.pem:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-setup:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    image: gitautonomic-app
    command: ["node", "dist/worker.js"]
    environment:
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: /app/private-key.pem
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-for-jwt-tokens}
      DATABASE_URL: postgresql://postgres:postgres@db:5432/gitautonomic
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: ${AGENT_WORK_ROOT:-/tmp/ai-agent-work}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - /tmp/ai-agent-work:/tmp/ai-agent-work
      - ./private-key.pem:/app/private-key.pem:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-setup:
        condition: service_completed_successfully
    restart: unless-stopped
