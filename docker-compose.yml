services:
  api:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    ports:
      - "3300:3300"
    environment:
      # Ten sam klucz zostanie użyty w worker dzięki anchor *gh_app_key
      GITHUB_APP_PRIVATE_KEY: &gh_app_key |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpAIBAAKCAQEAyKfQe0X/WCU4a4K5N4J7e3fZFd6wA8HO/qCw7GLjlScsM7Ci
        gzrt0Qp1YVnm5iOgbI2PLQ0CP8GR1RsYol+kTf41MM3TN2gaugyX7b1u3U9AfVzH
        8K1a0Acs2eKcnfSfOnTeQrInlZb1HfiC/KcoO8UAcDQgOD1GE6uM8F8U7hdToUCq
        RUFspnbdXezF52/QsAoacIKyEE03yic4V+vjDDadAhgsRX+M8kfOmBiOBaLWeBxG
        3VdTX4m4HXpEwKyAs69vE0bsy29TU7QDxrIQh3/qWXkK53DPRb2hTfMN6QRBTSUK
        lqkwBKNEb78Div2Fw5Az2rLmVcqf52aicBCSewIDAQABAoIBADbskImdwGZNUeND
        1hUWt1w1kwuEeCOfIlzaeXNLIkaKgXPorqNDNyOYPEcYh7aJG/l6yi0nuWzgPF3b
        2+NeUKg0pDSmsmEhMueoWNHvn3AeqGVoRyZfHVOCE0nU2M/3zLoAkXIqN+Gff5rj
        kl88Fiw+IX+VFRiv1QW/WIXXUPBWn8Blq4D06dUKHnFNBxlzx0wfLGNCNUFWdLaH
        riECkKbWgyRKxjMu878FSpNE4ITq5NTx+jcbV8vApD8L9IKi2L+FZpcFKyj76/vo
        +5//HVn6PbXIyCG1dM4db0M4jN8dMGUVy+t9po3B1Ub9HEoiXLx8Jd0bPH1F2IL4
        LFt+JpECgYEA9lfhal5M6lylHd0vbPBUOkfXun2O5NB12mmMdQyGIcRNb90QOJEt
        lKhdxbYOl+UNBbzU4YZozI8Pgs7ws06ftdHjOL/hDbaqdVJrJNY5L6q48AMVD5yG
        ny73z80rqWAfF8nbddQeungVQzm6NsNoSXDF/UF8nX3NE2gzz4bT+1kCgYEA0IVx
        +VqOHtoCj5OG/DMaYMs6WEPqRqQ13SRgh4xKSfkbOTwQor96RWD5lMT95+NfbwmV
        lQQyfAnpBPK/AOeT0LakLn/eV1KozCQBZWlOD8hj8cn9Ufq7+OzMrVinFTHxkf+G
        PsoyLkL7/NUdrxCU+wmj+jdM1nx7j6c/DJGqRfMCgYEAi8iqPHVuJ76SYzPTaXmm
        EbwaidQddXFkrp8d+H02z4pYdpV2UuLufmBbdYktFrv+e7b/BUoDxa+YGZ3br6N5
        tO54hQc8aU+xwgkWizyUDpxNfMQC+2zSZxl7vQqrL90/R3xfb6kCFsV1K0Riihiv
        4JyBfIfgcm2kJNMIM0ZKm2ECgYAjKU1lubJbW3GxGjRZ1JgvGDXXamRX0xrOFnM8
        iBiCzsGbbhh0CQuqJUcQogMalgmipKAXh6Snq9giIHi6w1H2kMWwnZk1alfSTIP7
        wL0MBkNsIx5XM4t81xlQZbGO7mQItWjCr7+0c1EgeiNOQOKOTjrbV3XaeRUwzQfh
        q7JlpwKBgQDo1ziv3lTK9bB5eOD6HSAh5o4S+SNHSSrgVKki6051gGE1GbWGdPKY
        nsHfz3SYO6v67LT9UK9nCUPJC95FIZS6scM1sbnzQfH8iF/lQ6dCeDM33lyK9ORh
        D6yn+507o47eXII7FylJWGfqc0OU7ggTBPUcwSYIXHS0o5lmpAtitg==
        -----END RSA PRIVATE KEY-----
      NODE_ENV: production
      PORT: ${PORT:-3300}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      APP_HOST: ${APP_HOST}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://${APP_HOST}/api/auth/github/callback}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work
    healthcheck:
      # Bez wget/curl – używamy Node fetch
      test: ["CMD", "node", "-e", "fetch('http://localhost:'+(process.env.PORT||3300)+'/healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    command: ["node", "dist/worker.js"]
    environment:
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      # Reuse tego samego PEM
      GITHUB_APP_PRIVATE_KEY: *gh_app_key
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUSTOM_LLM_ENDPOINT: ${CUSTOM_LLM_ENDPOINT}
      CUSTOM_LLM_API_KEY: ${CUSTOM_LLM_API_KEY}
      EMBEDDINGS_MODEL: ${EMBEDDINGS_MODEL:-text-embedding-3-small}
      JWT_SECRET: ${JWT_SECRET}
      RISK_HIGH_THRESHOLD: ${RISK_HIGH_THRESHOLD:-0.7}
      COVERAGE_MIN_LINES: ${COVERAGE_MIN_LINES:-0.75}
      AGENT_WORK_ROOT: /tmp/ai-agent-work
    volumes:
      - agent_work:/tmp/ai-agent-work

  db-migrate:
    build: .
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    command: >
      sh -c "
        echo 'Running Prisma migrations...' &&
        for i in $(seq 1 30); do
          npx prisma migrate deploy && npx prisma generate && exit 0;
          echo 'DB not ready yet, retrying in 2s...';
          sleep 2;
        done;
        echo 'Migration failed after retries' >&2; exit 1
      "

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-gitautonomic}
      POSTGRES_USER: ${POSTGRES_USER:-gitautonomic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/create-user-db.sql:/docker-entrypoint-initdb.d/10-create-user-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gitautonomic} -d ${POSTGRES_DB:-gitautonomic}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  agent_work:
